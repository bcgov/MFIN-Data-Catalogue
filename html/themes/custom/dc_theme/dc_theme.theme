<?php

/**
 * @file
 * Theme file.
 */

use Drupal\Component\Render\FormattableMarkup;
use Drupal\Component\Utility\Html;
use Drupal\Core\Link;
use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy\TermInterface;

/**
 * Implements hook_preprocess_HOOK() for block--bc-dc-edit-button.html.twig.
 */
function dc_theme_preprocess_block__bc_dc_edit_button(array &$variables): void {
  // Add custom classes to data_set build page section headers.
  $variables['title_attributes']['class'][] = 'h4';
  $variables['title_attributes']['class'][] = 'fw-bold';
}

/**
 * Implements hook_preprocess_HOOK() for block--entity-view--node.html.twig.
 */
function dc_theme_preprocess_block__entity_view__node(array &$variables): void {
  // Adjust spacing.
  $variables['attributes']['class'][] = 'mb-4';
  $variables['attributes']['class'][] = 'pb-4';
}

/**
 * Implements hook_preprocess_HOOK() for block--facets-summary-block.html.twig.
 */
function dc_theme_preprocess_block__facets_summary_block(array &$variables): void {
  // Hide search facet summary block label when the block is empty.
  if (empty($variables['content']['#items'])) {
    $variables['label'] = NULL;
  }
}

/**
 * Implements hook_preprocess_HOOK() for block--search-api-saved-searches.html.twig.
 */
function dc_theme_preprocess_block__search_api_saved_searches(array &$variables): void {
  $variables['attributes']['class'][] = 'bb-collapse';
  $variables['attributes']['class'][] = 'bb-collapse-responsive';
  $variables['attributes']['class'][] = 'dc-save-search';
  $variables['attributes']['class'][] = 'mb-0';
  $variables['attributes']['class'][] = 'mb-lg-5';
  $variables['attributes']['class'][] = 'p-lg-4';
  $variables['attributes']['class'][] = 'pt-lg-2';
  $variables['toggle_variable'] = 'save_this_search';
}

/**
 * Implements hook_preprocess_HOOK() for input--submit.html.twig.
 */
function dc_theme_preprocess_input__submit(array &$variables): void {
  // Add button--danger class to reset buttons.
  if ($variables['element']['#id'] === 'edit-reset') {
    $variables['attributes']['class'][] = 'button--danger';
  }
}

/**
 * Implements hook_preprocess_HOOK() for input--submit--paragraph-action.html.twig.
 */
function dc_theme_preprocess_input__submit__paragraph_action(array &$variables): void {
  // Remove class "button--small" on column edit pages.
  if (isset($variables['attributes']['class'])) {
    $key = array_search('button--small', $variables['attributes']['class'], TRUE);
    unset($variables['attributes']['class'][$key]);
  }
}

/**
 * Implements hook_preprocess_HOOK() for node--data-set.html.twig.
 */
function dc_theme_preprocess_node__data_set(array &$variables): void {
  // Prevent page title from appearing in an 'h2' element at the top.
  $variables['page'] = TRUE;
}

/**
 * Implements hook_preprocess_HOOK() for field--node--field-columns--data-set.html.twig.
 */
function dc_theme_preprocess_field__node__field_columns__data_set(array &$variables): void {
  // Add expand/collaps toggle button to data dictionary columns.
  $variables['attributes']['class'][] = 'bcbb-toggle-details-wrapper';
}

/**
 * Implements hook_preprocess_HOOK() for node--data-set--full.html.twig.
 */
function dc_theme_preprocess_node__data_set__full(array &$variables): void {
  global $base_url;

  // Make author name available in the template.
  //
  // Author of this node.
  $author = $variables['node']->getOwner();

  // If the search page route exists, make the author name be a link to it.
  if (\Drupal::service('router.route_provider')->getRoutesByNames(['page_manager.page_view_site_search_site_search-panels_variant-0'])) {
    // Query string for searching for the author as a facet.
    $options = [
      'query' => [
        'f' => [
          'author_id:' . $author->id(),
        ],
      ],
    ];
    $variables['author_link'] = Link::createFromRoute($author->getDisplayName(), 'page_manager.page_view_site_search_site_search-panels_variant-0', [], $options);
  }
  else {
    $variables['author_link'] = $author->getDisplayName();
  }

  $taxonomy_term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');

  // Display version of field_information_schedule.
  $information_schedule_term = $variables['elements']['field_information_schedule'][0]['#entity'] ?? NULL;
  if ($information_schedule_term instanceof TermInterface) {
    $parents = $taxonomy_term_storage->loadAllParents($information_schedule_term->id());

    $information_schedule_root_term = array_pop($parents);
    $variables['information_schedule_type'] = $information_schedule_root_term->label();

    $name_parts = [];
    foreach ($parents as $term) {
      if ($term->field_schedule_number->value) {
        array_unshift($name_parts, $term->label());
      }
    }
    if ($name_parts) {
      $has_children = (bool) $taxonomy_term_storage->loadChildren($information_schedule_term->id());
      $information_schedule_details_label = implode(': ', $name_parts);
      if ($has_children) {
        $variables['information_schedule_details'] = $information_schedule_details_label;
      }
      else {
        $variables['information_schedule_details'] = $information_schedule_term->toLink($information_schedule_details_label);
      }
    }
  }

  // Data dictionary download links.
  $variables['data_dictionary_download_links'] = bc_dc_get_data_dictionary_download_links($variables['node']);

  // Permalink.
  $variables['permalink'] = [
    '#theme' => 'clipboardjs_textfield',
    '#value' => $base_url . '/node/' . $variables['node']->id(),
    '#label' => t('Copy permalink'),
    '#alert_style' => 'tooltip',
    '#alert_text' => t('Copied!'),
  ];

  // Display field_visibility as list of all orgs with access.
  //
  // No access for anonymous.
  $variables['field_visibility'] = NULL;
  if (\Drupal::currentUser()->isAuthenticated()) {
    // Make a list of all orgs in field_visibility and check for special vaules.
    $special_access_flags = [
      'pub' => 'field_visibility_success',
      'auth' => 'field_visibility_warning',
    ];
    $visibility_orgs = [];
    foreach ($variables['node']->field_visibility->getValue() as $visibility) {
      $term = $taxonomy_term_storage->load($visibility['target_id']);
      if ($term instanceof TermInterface) {
        $visibility_orgs[] = $term->label();
        // If this term has an access flag included in $special_access_flags,
        // then this term will be the only one displayed. Use the class from
        // $special_access_flags. There should not be both pub/auth and other
        // terms selected, but it could happen.
        $field_access_flag = $term->field_access_flag->value;
        if (isset($special_access_flags[$field_access_flag])) {
          $variables['field_visibility_wrapper_class'] = $special_access_flags[$field_access_flag];
          $variables['field_visibility'] = $term->label();
          // The term 'pub' takes precedence over 'auth', so exist when it has
          // been found. If an 'auth' term has been found, check the rest in
          // case 'pub' is given as well.
          if ($field_access_flag === 'pub') {
            break;
          }
        }
      }
    }

    // Special not selected, display a list of orgs with access, adding OPR.
    if (!$variables['field_visibility']) {
      // Add field_primary_responsibility_org to the list.
      $field_primary_responsibility_org = $variables['node']->field_primary_responsibility_org->get(0);
      if ($field_primary_responsibility_org) {
        $term = $taxonomy_term_storage->load($field_primary_responsibility_org->getValue()['target_id']);
        if ($term instanceof TermInterface) {
          $visibility_orgs[] = $term->label();
        }
      }
      // Theme as list.
      sort($visibility_orgs);
      $variables['field_visibility_wrapper_class'] = 'field_visibility_danger';
      $variables['field_visibility'] = [
        '#theme' => 'item_list',
        '#items' => $visibility_orgs,
      ];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for node--data-set-build-page.html.twig.
 */
function dc_theme_preprocess_node__data_set_build_page(array &$variables): void {
  $variables['attributes']['class'][] = 'dc-data-set-build-page';
  $variables['page'] = TRUE;
}

/**
 * Implements hook_preprocess_HOOK() for page--node--add-columns.html.twig.
 */
function dc_theme_preprocess_page__node__add_columns(array &$variables): void {
  $variables['b5_top_container'] = 'container-fluid';
}

/**
 * Implements hook_preprocess_HOOK() for taxonomy-term--information-schedule.html.twig.
 */
function dc_theme_preprocess_taxonomy_term__information_schedule(array &$variables): void {
  // Instead of displaying the full name, field_abbr_full_name, display that and
  // all ancestors using the correct labels for each level.
  //
  // Labels for the different levels in the taxonomy.
  $level_labels = [
    t('Information schedule type'),
    t('Information schedule name'),
    t('Business function'),
    t('Business category'),
  ];
  // Get this term and its ancestors.
  $taxonomy_term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $term_and_ancestors = $taxonomy_term_storage->loadAllParents($variables['elements']['#taxonomy_term']->id());
  $number_of_terms = count($term_and_ancestors);
  // Remove labels if there are too many.
  while (count($level_labels) > $number_of_terms) {
    array_pop($level_labels);
  }
  // Add default label if there are too few.
  while (count($level_labels) < $number_of_terms) {
    $level_labels[] = t('Sub-type');
  }
  // Determine whether the root term is ARCS.
  $root_term = $term_and_ancestors[array_key_last($term_and_ancestors)];
  $is_arcs = $root_term->label() === 'ARCS';
  // Starting from the current term and going up the tree, add the label of each
  // level to the output using the correct level label.
  foreach ($term_and_ancestors as $term) {
    $level = $variables['content']['field_abbr_full_name'];
    $level['#title'] = array_pop($level_labels);
    // If the root term is ARCS and this is the second level, use the full name
    // of the root term for the value.
    if ($is_arcs && count($level_labels) === 1) {
      $value = $root_term->field_abbr_full_name->value ?? $term->label();
    }
    // Otherwise, the value comes from field_abbr_full_name except for the top
    // level which uses the term label.
    elseif (count($level_labels)) {
      $value = $term->field_abbr_full_name->value ?? $term->label();
    }
    else {
      $value = $term->label();
    }
    $level[0]['#context']['value'] = $value;
    array_unshift($variables['content'], $level);
  }
  // Remove the display of the full name.
  unset($variables['content']['field_abbr_full_name']);

  // For entity reference fields, use abbr to provide the full name.
  foreach ($variables['content'] as &$field) {
    // Act only on entity reference fields.
    if (($field['#field_type'] ?? NULL) !== 'entity_reference') {
      continue;
    }
    // If there is a field_abbr_full_name, use it as the abbr element @title.
    // Otherwise, only display the label.
    // Always use #markup so that extensions can be added below.
    $title = $field[0]['#entity']->field_abbr_full_name->value;
    $label = $field[0]['#entity']->label();
    if (isset($title)) {
      $context = [
        '@title' => $title,
        '@text' => $label,
      ];
      $field[0]['#markup'] = new FormattableMarkup('<abbr>@text</abbr> (@title)', $context);
    }
    else {
      $field[0]['#markup'] = Html::escape($label);
    }
    unset($field[0]['#plain_text']);
  }
  // Allow variable name to be re-used after being a reference.
  unset($field);

  // Combine active period fields with their extensions.
  $fields = [
    'field_active_period' => 'field_active_period_extension',
    'field_semi_active_period' => 'field_semi_active_extension',
  ];
  foreach ($fields as $field => $extension) {
    if (isset($variables['content'][$field][0]['#markup']) && isset($variables['content'][$extension]['#items'])) {
      $variables['content'][$field][0]['#markup'] .= ' ' . Html::escape($variables['content'][$extension]['#items']->getString());
    }
    unset($variables['content'][$extension]);
  }
}

/**
 * Implements hook_preprocess_HOOK() for views-view-field.html.twig.
 */
function dc_theme_preprocess_views_view_fields(array &$variables): void {
  // For 'nothing' fields, remove the wrapper element if it is a 'div' or 'span'
  // with no attributes.
  $element_names = [
    'div',
    'span',
  ];
  if (isset($variables['fields']['nothing']) && in_array($variables['fields']['nothing']?->element_type, $element_names, TRUE) && empty($variables['fields']['nothing']->element_attributes->storage())) {
    $variables['fields']['nothing']->element_type = NULL;
  }
}

/**
 * Implements hook_preprocess_HOOK() for field-multiple-value-form.html.twig.
 */
function dc_theme_preprocess_field_multiple_value_form(array &$variables): void {
  // In the template, output will be fieldset/legend when `multiple` is set.
  if ($variables['multiple']) {
    // Use element title for legend.
    $variables['legend'] = $variables['element']['#title'];

    // Adjust headers for tabledrag tables.
    if (isset($variables['table']['#tabledrag']) && count($variables['table']['#header']) === 3) {
      // Improve table header labels.
      $variables['table']['#header'] = [
        [
          // For unknown reasons, 'data' must be an array to avoid a test error.
          'data' => [
            '#markup' => t('Items'),
          ],
          'colspan' => 2,
        ],
        ['data' => t('Actions')],
        // Move this into an array to allow adding classes.
        ['data' => $variables['table']['#header'][2]],
      ];
      // Visually hide the header row.
      foreach (array_keys($variables['table']['#header']) as $key) {
        $variables['table']['#header'][$key]['class'] = 'visually-hidden';
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for node--data-set-build-page.html.twig.
 */
function dc_theme_preprocess_node(&$variables) {
  // Check for field_data_set_type.
  if ($variables['node']->hasField('field_data_set_type')) {
    $term = $variables['node']->field_data_set_type->entity;

    if ($term) {
      // Get the root term.
      while ($term->parent->entity) {
        $term = $term->parent->entity;
      }

      // Change first letter case.
      $rootTerm = $term->label();
      $rootTermLowercase = lcfirst($rootTerm);

      // Pass the root term name to the Twig template.
      $variables['record_type'] = $rootTermLowercase;
    }
    else {
      $variables['record_type'] = t('record');
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for page-title.html.twig.
 */
function dc_theme_preprocess_page_title(array &$variables): void {
  // Get the route.
  $route_match = \Drupal::routeMatch();
  // Check that it's a term page.
  if ($route_match->getRouteName() === 'entity.taxonomy_term.canonical') {
    // Get the term and see if it belongs to vocab information_schedule.
    $term = $route_match->getParameter('taxonomy_term');
    if ($term instanceof Term && $term->bundle() === 'information_schedule') {
      // Get the pre-title from the module configuration.
      $pre_title_text = (string) \Drupal::config('bc_dc.settings')->get('info_schedule_pre_title');
      if ($pre_title_text !== '') {
        // Add a pre-title markup and value.
        $variables['title_prefix']['pre_title'] = [
          '#markup' => '<span class="pre-title">' . $pre_title_text . '</span>',
        ];
      }
    }
  }
}
