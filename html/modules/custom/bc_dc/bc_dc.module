<?php

/**
 * @file
 * Module file.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_preprocess_HOOK().
 */
function bc_dc_preprocess_flag(array &$variables): void {
  // Replace @title with improved @aria-label.
  unset($variables['attributes']['title']);
  $title = $variables['flaggable']->getTitle();
  $variables['attributes']['aria-label'] = $variables['action'] === 'flag' ?
    t('Not bookmarked; add bookmark for "@title".', ['@title' => $title]) :
    t('Bookmarked; remove bookmark for "@title".', ['@title' => $title]);

  // Theme like a button.
  $variables['attributes']['class'][] = 'button';
}

/**
 * Return the number of bookmarks on a given entity.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity to count on.
 *
 * @return int
 *   The number of bookmarks on the given entity.
 */
function bc_dc_count_node_bookmarks(EntityInterface $entity): int {
  $count = \Drupal::service('flag.count')->getEntityFlagCounts($entity);
  return isset($count['bookmark']) ? ((int) $count['bookmark']) : 0;
}

/**
 * Implements hook_entity_display_build_alter().
 *
 * Based on hook implementation in empty_fields module.
 */
function bc_dc_entity_display_build_alter(array &$build, array $context): void {
  // Act only on build page view modes. Return early otherwise.
  $view_modes = [
    'data_set_build_page',
    'data_set_columns',
  ];
  if (!in_array($context['view_mode'], $view_modes, TRUE)) {
    return;
  }

  /** @var \Drupal\Core\Entity\EntityInterface $entity */
  $entity = $context['entity'];
  /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display */
  $display = $context['display'];
  foreach (Element::children($build) as $field_name) {
    if ($entity->get($field_name)->isEmpty()) {
      $definition = $entity->get($field_name)->getFieldDefinition();
      $component = $display->getComponent($field_name);

      $empty_text = $definition->isRequired() ? t('Required') : t('Optional');
      $markup = ['#markup' => '<em>' . $empty_text . '</em>'];

      $build[$field_name] = [
        '#theme' => 'field',
        '#title' => $definition->getLabel(),
        '#label_display' => $component['label'],
        '#view_mode' => $context['view_mode'],
        '#language' => $entity->get($field_name)->getLangcode(),
        '#field_name' => $definition->getName(),
        '#field_type' => 'string',
        '#field_translatable' => $definition->isTranslatable(),
        '#entity_type' => $entity->getEntityTypeId(),
        '#bundle' => $entity->bundle(),
        '#object' => $entity,
        '#items' => [(object) ['_attributes' => []]],
        '#is_multiple' => FALSE,
        // Use simple formatter.
        '#formatter' => 'string',
        '0' => $markup,
      ] + $build[$field_name];
    }
  }
}
