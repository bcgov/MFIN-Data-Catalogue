<?php

/**
 * @file
 * Module file.
 */

use Drupal\bc_dc\Controller\BcDcCreateFileController;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Access\AccessResultAllowed;
use Drupal\Core\Access\AccessResultInterface;
use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\message_gcnotify\Service\GcNotifyApiService;
use Drupal\node\NodeInterface;
use Drupal\tac_lite\Form\SchemeForm;
use Drupal\taxonomy\TermInterface;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_entity_operation().
 */
function bc_dc_entity_operation(EntityInterface $entity): array {
  $operations = [];

  // Do nothing for entities that are not data_set nodes.
  if ($entity->getEntityTypeId() !== 'node' || $entity->bundle() !== 'data_set') {
    return $operations;
  }

  $url = Url::fromRoute('bc_dc.data_set_build_page_tab', ['node' => $entity->id()]);
  if ($url->access()) {
    $operations['bc_dc_build'] = [
      'title' => t('Build'),
      'url' => $url,
    ];
  }

  $url = Url::fromRoute('bc_dc.data_set_archive_page', ['node' => $entity->id()]);
  if ($url->access()) {
    $operations['bc_dc_archive'] = [
      'title' => t('Unpublish'),
      'url' => $url,
    ];
  }

  return $operations;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function bc_dc_preprocess_flag(array &$variables): void {
  // Replace @title with improved @aria-label.
  unset($variables['attributes']['title']);
  $title = $variables['flaggable']->getTitle();
  $variables['attributes']['aria-label'] = $variables['action'] === 'flag' ?
    t('Not bookmarked; add bookmark for "@title".', ['@title' => $title]) :
    t('Bookmarked; remove bookmark for "@title".', ['@title' => $title]);

  // Bookmark count message.
  // If at least one user has bookmarked an item, add a message with the count.
  $node_bookmark_count = bc_dc_count_node_bookmarks($variables['flaggable']);
  if ($node_bookmark_count > 0) {
    $args = [
      '@count' => $node_bookmark_count,
    ];
    $count_message = \Drupal::translation()->formatPlural($node_bookmark_count, 'Bookmarked by 1 person', 'Bookmarked by @count people', $args);
    $variables['title']['#markup'] = '<span class="title dc-label icon-bi-bookmark-dash-fill">' . $variables['title']['#markup'] . '</span> <span class="count small">' . $count_message->render() . '</span>';
  }
  else {
    // Add "add bookmark" icon class.
    $variables['attributes']['class'][] = 'icon-bi-bookmark-plus';
  }
}

/**
 * Implements hook_preprocess_HOOK() for node--data-set.html.twig.
 */
function bc_dc_preprocess_node__data_set(array &$variables): void {
  // Hide fields on view and build pages based on field_data_set_type.
  foreach (array_keys($variables['content']) as $field_key) {
    if (!bc_dc_data_set_has_field($variables['node'], $field_key)) {
      $variables['content'][$field_key]['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for taxonomy-term--organization.html.twig.
 */
function bc_dc_preprocess_taxonomy_term__organization(array &$variables): void {
  if ($variables['view_mode'] === 'bc_dc_org_footer') {
    // Hide second display of term title. The block title will display and is
    // set to the term name in BcDcOrgFooter.
    $variables['page'] = TRUE;
  }
}

/**
 * Implements hook_shs_FIELDNAME_class_definitions_alter() for field_data_set_type.
 */
function bc_dc_shs_field_data_set_type_class_definitions_alter(array &$definitions, array $context): void {
  // Override the widget. The override is in library bc_dc/bc_dc.form.
  $definitions['views']['widget'] = 'Drupal.bc_dc.WidgetView';
}

/**
 * Implements hook_preprocess_HOOK() for input.html.twig.
 */
function bc_dc_preprocess_input(array &$variables): void {
  // Add library bc_dc/bc_dc.form to pages that have a shs component.
  if (isset($variables['element']['#shs'])) {
    $variables['#attached']['library'][] = 'bc_dc/bc_dc.form';
  }
}

/**
 * Implements hook_theme().
 */
function bc_dc_theme(array $existing, string $type, string $theme, string $path): array {
  return [
    // Blank template.
    'bc_dc_blank' => [],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function bc_dc_theme_suggestions_block_alter(array &$suggestions, array $variables): void {
  // Hide Section 4 & 5 entirely when the data_set does not have field_columns.
  // These sections do not have any fields.
  $sections = [
    'section_4',
    'section_5',
  ];
  if (isset($variables['elements']['#plugin_id']) && (
    ($variables['elements']['#plugin_id'] === 'bc_dc_edit_button' && in_array($variables['elements']['#configuration']['query_param'], $sections, TRUE)) ||
    ($variables['elements']['#plugin_id'] === 'entity_view:node' && in_array($variables['elements']['content']['#view_mode'], $sections, TRUE))
  )) {
    $node = \Drupal::request()->attributes->get('node');
    if ($node && !bc_dc_data_set_has_field($node, 'field_columns')) {
      $suggestions = ['bc_dc_blank'];
    }
  }
}

/**
 * Return the number of bookmarks on a given entity.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity to count on.
 *
 * @return int
 *   The number of bookmarks on the given entity.
 */
function bc_dc_count_node_bookmarks(EntityInterface $entity): int {
  $count = \Drupal::service('flag.count')->getEntityFlagCounts($entity);
  return isset($count['bookmark']) ? ((int) $count['bookmark']) : 0;
}

/**
 * Implements hook_entity_display_build_alter().
 *
 * Based on hook implementation in empty_fields module.
 */
function bc_dc_entity_display_build_alter(array &$build, array $context): void {
  // Act only on build page view modes. Return early otherwise.
  $view_modes = [
    'section_1',
    'section_2',
    'section_3',
    'section_4',
    'section_5',
    'revision_mode',
  ];
  if (!in_array($context['view_mode'], $view_modes, TRUE)) {
    return;
  }

  /** @var \Drupal\Core\Entity\EntityInterface $entity */
  $entity = $context['entity'];
  foreach (Element::children($build) as $field_name) {
    if ($entity->get($field_name)->isEmpty()) {
      $definition = $entity->get($field_name)->getFieldDefinition();

      $empty_text = match($field_name) {
        'field_last_review_date' => t('Never'),
        default => $definition->isRequired() ? t('Required') : t('Optional'),
      };
      $class = $definition->isRequired() ? 'field-required' : 'field-optional';
      $markup = ['#markup' => '<em class="' . $class . '">' . $empty_text . '</em>'];

      $build[$field_name] = [
        '#theme' => 'field',
        '#title' => $definition->getLabel(),
        '#label_display' => 'inline',
        '#view_mode' => $context['view_mode'],
        '#language' => $entity->get($field_name)->getLangcode(),
        '#field_name' => $definition->getName(),
        '#field_type' => 'string',
        '#field_translatable' => $definition->isTranslatable(),
        '#entity_type' => $entity->getEntityTypeId(),
        '#bundle' => $entity->bundle(),
        '#object' => $entity,
        '#items' => [(object) ['_attributes' => []]],
        '#is_multiple' => FALSE,
        // Use simple formatter.
        '#formatter' => 'string',
        '0' => $markup,
      ] + $build[$field_name];
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function bc_dc_node_access(NodeInterface $entity, string $operation, AccountInterface $account): AccessResultInterface {
  // Allow delete for data_set nodes that have never been published, if the
  // organization matches and they have the correct permissions. This cannot be
  // done in tac_lite because of the never-published check. If a node was
  // formerly published, its moderation_state will be "archived".
  $entity_owner = $entity->getOwnerId();
  if (
    $operation === 'delete' &&
    $entity->bundle() === 'data_set' &&
    $entity->get('moderation_state')->value === 'draft' &&
    bc_dc_data_set_user_org_match($entity, $account) &&
    (
      $account->hasPermission('delete any never_published data_set in_org') ||
      (
        $entity_owner && $entity_owner === $account->id() && $account->hasPermission('delete own never_published data_set in_org')
      )
    )
  ) {
    return AccessResult::allowed();
  }

  return AccessResult::neutral();
}

/**
 * Returns whether the user is in the OPR of a data_set.
 *
 * @param \Drupal\node\NodeInterface $entity
 *   The entity to compare.
 * @param \Drupal\Core\Session\AccountInterface $account
 *   The account to compare.
 *
 * @return bool
 *   TRUE if the entity's value in field_primary_responsibility_org is also in
 *   the account's field_organization, FALSE otherwise.
 */
function bc_dc_data_set_user_org_match(NodeInterface $entity, AccountInterface $account): bool {
  if (!$entity->hasField('field_primary_responsibility_org')) {
    return FALSE;
  }

  // Get the field_primary_responsibility_org target.
  $primary_responsibility_org = $entity->get('field_primary_responsibility_org')->first()?->getValue();
  $primary_responsibility_org = (int) ($primary_responsibility_org['target_id'] ?? NULL);

  $user = User::load($account->id());
  // Get array of the targets of field_organization.
  $user_organizations = [];
  foreach ($user->get('field_organization')->getValue() as $reference) {
    $user_organizations[$reference['target_id']] = TRUE;
  }

  return !empty($user_organizations[$primary_responsibility_org]);
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function bc_dc_node_presave(NodeInterface $entity): void {
  // Act only on data_set nodes.
  if ($entity->bundle() !== 'data_set') {
    return;
  }

  // When is_complete_review is checked, set field_last_review_date to now.
  if ($entity->get('field_is_complete_review')->value) {
    $entity->set('field_last_review_date', date('Y-m-d'));
    $entity->set('field_is_complete_review', FALSE);
  }

  // Update field_review_status.
  \Drupal::service('bc_dc.update_review_status')->updateEntity($entity, FALSE);
}

/**
 * Implements hook_ENTITY_TYPE_update() for node.
 */
function bc_dc_node_update(NodeInterface $entity): void {
  // Send a notification to all users who have bookmarked this data_set and who
  // last viewed it before the modified_date.
  //
  // Act only on data_set nodes.
  if ($entity->bundle() !== 'data_set') {
    return;
  }

  // If field_modified_date is not made greater than it was, do nothing.
  $old_modified_date = $entity->original->field_modified_date->value;
  $new_modified_date = $entity->field_modified_date->value;
  if ($new_modified_date <= $old_modified_date) {
    return;
  }

  // Load an array of all bookmarks.
  $flag_service = \Drupal::service('flag');
  $bookmark_flag = $flag_service->getFlagById('bookmark');
  /** @var \Drupal\flag\FlaggingInterface[] $bookmark_flaggings Array of flaggings. */
  $bookmark_flaggings = $flag_service->getEntityFlaggings($bookmark_flag, $entity);

  // Create an array of users who need to be notified of the change.
  /** @var string[] $send_to Array of email addresses. */
  $send_to = [];
  // Add to the list if the data set was modified after the last viewed date.
  // We compare dates because field_modified_date might not be set to now, but
  // some time in the past when it was know that an update was made.
  foreach ($bookmark_flaggings as $bookmark_flagging) {
    if ($new_modified_date > $bookmark_flagging->get('field_last_viewed_date')->value) {
      $email = $bookmark_flagging->getOwner()->getEmail();
      if ($email) {
        $send_to[] = $email;
      }
    }
  }

  // No recipients.
  if (!$send_to) {
    $context = [
      '@nid' => $entity->id(),
    ];
    \Drupal::logger('bc_dc')->notice('No messages to send when updating data_set @nid.', $context);
    return;
  }

  // Send the notifications.
  //
  // Message subject.
  $subject = t('A dataset you have bookmarked has been updated');
  // Message body.
  $context = [
    '@title' => $entity->getTitle(),
    '@link' => $entity->toUrl('canonical', ['absolute' => TRUE])->toString(),
  ];
  $body = t('The following dataset has been updated:
@title
@link', $context);
  // Send the message and log the result.
  $success = GcNotifyApiService::sendMessage($send_to, $subject, $body);
  if ($success) {
    $context = [
      '@count' => count($send_to),
      '@nid' => $entity->id(),
    ];
    \Drupal::logger('bc_dc')->notice('Sent message to @count users when updating data_set @nid.', $context);
  }
  else {
    $context = [
      '@nid' => $entity->id(),
    ];
    \Drupal::logger('bc_dc')->error('Failed sending message when updating data_set @nid.', $context);
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert() for user entities.
 */
function bc_dc_user_insert(UserInterface $account): void {
  bc_dc_update_tac($account);
}

/**
 * Implements hook_ENTITY_TYPE_update() for user entities.
 */
function bc_dc_user_update(UserInterface $account): void {
  bc_dc_update_tac($account);
}

/**
 * Helper function to update TAC config per user based on user org.
 *
 * @param \Drupal\user\UserInterface $account
 *   The accoun to act on.
 */
function bc_dc_update_tac(UserInterface $account): void {
  // Automatically set tac tid.
  if ($account->hasField('field_organization') && !$account->get('field_organization')->isEmpty()) {
    $orgs = $account->get('field_organization')->getValue();
    foreach ($orgs as $org) {
      $values[$org['target_id']] = $org['target_id'];
    }
    $schemes = [1, 2, 3];
    foreach ($schemes as $scheme) {
      $config = SchemeForm::tacLiteConfig($scheme);
      // tac_lite set.
      \Drupal::service('user.data')->set('tac_lite', $account->id(), $config['realm'], ['organization' => $values]);
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Form create_data_set.
 */
function bc_dc_form_webform_submission_create_data_set_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  /** @var \Drupal\user\Entity\User $user */
  $user = User::load(\Drupal::currentUser()->id());

  // Taxonomy terms that should always be removed.
  $delete_values = [
    'Public',
    'IDIR users',
  ];

  // Get an array of taxonomy term IDs for organizations this user is part of.
  // The array keys are the IDs and the values are all TRUE.
  $user_orgs = [];
  if ($user->hasField('field_organization')) {
    foreach ($user->field_organization->getValue() ?? [] as $org) {
      $user_orgs[$org['target_id']] = TRUE;
    }
  }

  // Remove from the options for field_primary_responsibility_org the
  // $delete_values and any organizations the user is not a member of.
  foreach ($form['elements']['field_primary_responsibility_org']['#options'] as $key => $option) {
    if (in_array($option, $delete_values, TRUE) || empty($user_orgs[$key])) {
      unset($form['elements']['field_primary_responsibility_org']['#options'][$key]);
    }
  }

  // If there is only one option, select it and hide the control.
  $count = count($form['elements']['field_primary_responsibility_org']['#options']);
  if ($count === 1) {
    $org_id = array_key_first($form['elements']['field_primary_responsibility_org']['#options']);
    $form['elements']['field_primary_responsibility_org']['#default_value'] = $org_id;
    $form['elements']['field_primary_responsibility_org']['#access'] = FALSE;
  }

  // If there are no options, hide the form and display a message. Otherwise,
  // hide the message.
  if ($count === 0) {
    foreach (array_keys($form['elements']) as $key) {
      if ($key !== 'empty_user_field_organization_message') {
        $form['elements'][$key]['#access'] = FALSE;
      }
    }
    $form['actions']['#access'] = FALSE;
  }
  else {
    $form['elements']['empty_user_field_organization_message']['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_alter().
 */
function bc_dc_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  switch ($form_id) {
    case 'node_book_edit_form':
    case 'node_book_form':
      // Remove revisioning informaion.
      $form['revision_information']['#access'] = FALSE;
      // Remove status information.
      $form['meta']['#access'] = FALSE;
      $form['options']['#access'] = FALSE;
      $form['menu']['#access'] = FALSE;
      $form['author']['#access'] = FALSE;
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function bc_dc_form_node_data_set_edit_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  // Remove the "Edit all" button.
  $form['field_columns']['widget']['header_actions']['actions']['edit_all']['#access'] = FALSE;
  // Remove the "Collapse all" action.
  $form['field_columns']['widget']['header_actions']['dropdown_actions']['collapse_all']['#access'] = FALSE;

  // Remove revision & content translation info section.
  $form['content_translation']['#access'] = FALSE;
  $form['revision_information']['#access'] = FALSE;
  $form['meta']['#access'] = FALSE;
  // Remove Advanced which display status of node.
  $form['advanced']['#access'] = FALSE;
  // Remove delete btn from node edit page.
  $form['actions']['delete']['#access'] = FALSE;

  // Disable if no review interval is set.
  if (isset($form['field_is_complete_review'])) {
    $form['field_is_complete_review']['#states']['disabled'][':input[id="edit-field-review-interval-0-value"]'] = ['empty' => TRUE];
  }

  // Remove revisioning informaion.
  $form['revision_information']['#access'] = FALSE;
  // Remove status information.
  $form['advanced']['#access'] = FALSE;

  // On the section 5 build form, add a link to the import/export page.
  $node = $form_state->getFormObject()?->getEntity();
  $form_display = \Drupal::request()->get('display');
  if ($node instanceof NodeInterface && $form_display === 'section_5') {
    // Generate the link.
    $route_parameters = [
      'node' => $node->id(),
    ];
    $link_options = [
      'attributes' => [
        'class' => [
          'btn',
          'btn-primary',
        ],
      ],
      'query' => [
        'destination' => \Drupal::service('redirect.destination')->get(),
      ],
    ];
    $link = Link::createFromRoute(t('Import/export data columns'), 'bc_dc.data_set_edit_add_columns', $route_parameters, $link_options);
    // Add link to top of form.
    if ($link->getUrl()->access()) {
      $form['add_columns_link'] = $link->toRenderable();
      $form['add_columns_link']['#weight'] = -100;
    }
  }

  // Style the "Cancel" button.
  if (isset($form['actions']['cancel'])) {
    $form['actions']['cancel']['#attributes']['class'][] = 'btn btn-danger';
  }

  // Add custom validate handler that runs first.
  // Do not run for the default display mode, which admins may use.
  if ($form_state->get('form_display')?->getMode() !== 'default') {
    if (!isset($form['#validate'])) {
      $form['#validate'] = [];
    }
    array_unshift($form['#validate'], '_bc_dc_form_node_data_set_edit_form_submit');
  }
}

/**
 * Return the taxonomy term that is the root ancestor for a term identifier.
 *
 * @param int $tid
 *   The term identifier to return the ancestor for.
 *
 * @return \Drupal\taxonomy\TermInterface|null
 *   The root ancestor term or NULL if there is no such term.
 */
function _bc_dc_get_term_root_ancestor(int $tid): ?TermInterface {
  $ancestors = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadAllParents($tid);
  return $ancestors ? end($ancestors) : NULL;
}

/**
 * Form validate handler.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function _bc_dc_form_node_data_set_edit_form_submit(array &$form, FormStateInterface $form_state): void {
  // Saving should always be to a draft state. This must run first to ensure it
  // will work regardless of what transtions are configured.
  $form_state->setValue(['moderation_state', '0', 'value'], 'draft');

  // Check that the root ancestor of the field_data_set_type has not changed.
  // Old field_data_set_type.
  $node = $form_state->getFormObject()->getEntity();
  $old_type = (int) $node->field_data_set_type?->first()?->getValue()['target_id'] ?? NULL;
  // New field_data_set_type.
  $new_type = (int) $form_state->getValue('field_data_set_type')[0]['target_id'] ?? NULL;
  // If the type has changed, check if their root ancestors have changed.
  if ($new_type !== $old_type) {
    $old_type_root = _bc_dc_get_term_root_ancestor($old_type);
    $new_type_root = _bc_dc_get_term_root_ancestor($new_type);
    if (!$new_type_root || $new_type_root->id() !== $old_type_root->id()) {
      $form_state->setErrorByName('field_data_set_type', t('The metadata root record type cannot be changed.'));
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function bc_dc_taxonomy_term_presave(TermInterface $term): void {
  // Only act on information_schedule terms.
  if ($term->bundle() !== 'information_schedule') {
    return;
  }

  // Set the value for field_schedule_code.
  // If this item's own field_schedule_number is empty, use empty. Otherwise,
  // combine with the non-empty values from the ancestor terms.
  if ((string) $term->field_schedule_number->value === '') {
    $new_code = NULL;
  }
  else {
    // Start with code of current term.
    $new_code = [$term->field_schedule_number->value];
    // Add the codes of ancestor terms.
    $term_parents = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadAllParents($term->parent->target_id);
    foreach ($term_parents as $term_parent) {
      $term_parent_number = (string) $term_parent->field_schedule_number->value;
      if ($term_parent_number !== '') {
        $new_code[] = $term_parent_number;
      }
    }
    // ::loadAllParents() gives them in reverse order to what we want.
    $new_code = implode('-', array_reverse($new_code));
  }
  // Update code if it has changed.
  // In bc_dc_taxonomy_term_presave(), descendents will be re-saved so that they
  // get the new value as well.
  if ($new_code !== $term->field_schedule_code->value) {
    $term->set('field_schedule_code', $new_code);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function bc_dc_taxonomy_term_update(TermInterface $term): void {
  // If the term is in information_schedule, is not new, and their local code
  // has changed, re-save descendents so that they get the new value as well.
  if ($term->bundle() === 'information_schedule' && !$term->isNew() && $term->original->field_schedule_number->value !== $term->field_schedule_number->value) {
    $termStorage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
    $descendents = $termStorage->loadTree($term->bundle(), $term->id(), NULL, TRUE);
    foreach ($descendents as $descendent) {
      $descendent->save();
    }
  }
}

/**
 * Implements hook_cron().
 */
function bc_dc_cron(): void {
  // Limit to running once a day.
  $request_time = \Drupal::time()->getRequestTime();
  $cron_last_run = \Drupal::state()->get('bc_dc.cron_last_run', 0);
  if (date('Y-m-d', $request_time) === date('Y-m-d', $cron_last_run)) {
    return;
  }
  // Record that this function has run.
  \Drupal::state()->set('bc_dc.cron_last_run', $request_time);

  // Send review reminders on Sundays.
  if (idate('w', $request_time) === 0) {
    $reviewReminder = \Drupal::service('bc_dc.review_reminder');
    $reviewReminder->sendRemindersToAllUsers();
  }

  // Update every instance of field_review_status.
  \Drupal::service('bc_dc.update_review_status')->updateAll();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function bc_dc_form_bc_dc_add_columns_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  $nid = $form_state->get('nid');
  $entity = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
  $data_dictionary_download_links = bc_dc_get_data_dictionary_download_links($entity);
  if ($data_dictionary_download_links) {
    $form['data_dictionary'] = $data_dictionary_download_links;
    $form['data_dictionary']['#weight'] = 0;
  }
}

/**
 * Return a renderable list of links to download column import files.
 *
 * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
 *   The entity.
 *
 * @return array|null
 *   A Drupal render array or NULL if there are no columns.
 */
function bc_dc_get_data_dictionary_download_links(FieldableEntityInterface $entity): ?array {
  if (!$entity->get('field_columns')->referencedEntities()) {
    return NULL;
  }

  $items = [];
  foreach (BcDcCreateFileController::SUPPORTED_EXTENSIONS as $format) {
    $items[] = Link::createFromRoute(
      t('Download current data dictionary file to @format', ['@format' => strtoupper($format)]),
      'bc_dc.create_columns_file',
      ['node' => $entity->id(), 'format' => $format],
    );
  }
  return [
    '#theme' => 'item_list',
    '#items' => $items,
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function bc_dc_form_search_api_saved_search_default_create_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  // Update title and description for saved search block form control.
  $form['label']['widget'][0]['value']['#title'] = t('Name');
  $form['label']['widget'][0]['value']['#description'] = t('The name of the search as it will appear in your dashboard.');
  // Hide cancel button.
  $form['actions']['cancel']['#access'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function bc_dc_form_views_exposed_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  // Act only on search API fulltext filter forms.
  if (!isset($form['search_api_fulltext'])) {
    return;
  }

  // Display the title as @aria-label.
  $form['search_api_fulltext']['#title_display'] = 'none';
  $form['search_api_fulltext']['#attributes']['aria-label'] = $form['search_api_fulltext']['#title'];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function bc_dc_form_views_form_site_search_block_1_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  // Move up search page "Select / deselect all results" control.
  $form['header']['views_bulk_operations_bulk_form']['select_all']['#weight'] = -1;
}

/**
 * Implements hook_views_pre_build().
 */
function bc_dc_views_pre_build(ViewExecutable $view): void {
  // Hide vbo_export on search pages for anonymous users.
  if ($view->id() === 'site_search' && \Drupal::currentUser()->isAnonymous()) {
    unset($view->field['views_bulk_operations_bulk_form']);
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function bc_dc_menu_local_tasks_alter(array &$data, string $route_name, RefinableCacheableDependencyInterface &$cacheability): void {
  // Remove the "Edit" tab for everybody except administrators.
  //
  // Only act on data_set nodes.
  $node = \Drupal::routeMatch()->getParameter('node');
  if (is_numeric($node)) {
    $node = \Drupal::entityTypeManager()->getStorage('node')->load($node);
  }
  if (($node instanceof NodeInterface) && $node->bundle() == 'data_set') {
    // Rename tabs for clarity.
    if (isset($data['tabs'][0]['content_moderation.workflows:node.latest_version_tab'])) {
      if ($data['tabs'][0]['content_moderation.workflows:node.latest_version_tab']['#access'] instanceof AccessResultAllowed) {
        $data['tabs'][0]['entity.node.canonical']['#link']['title'] = t('Current published');
        $data['tabs'][0]['content_moderation.workflows:node.latest_version_tab']['#link']['title'] = t('View draft');
      }
      elseif (!$node->isPublished() && $node->isLatestRevision()) {
        $data['tabs'][0]['entity.node.canonical']['#link']['title'] = t('View draft');
      }
    }

    // Remove Edit tab unless the user has access to the default form mode.
    $user = \Drupal::currentUser();
    if (!$user->hasPermission('use  The form mode default linked to  node entity( data_set )')) {
      unset($data['tabs'][0]['entity.node.edit_form']);
    }
  }

  // Rename certain tabs.
  if (isset($data['tabs'][0]['entity.user.edit_form']['#link']['title'])) {
    $data['tabs'][0]['entity.user.edit_form']['#link']['title'] = t('Edit profile');
  }
  if (isset($data['tabs'][0]['entity.user.canonical']['#link']['title'])) {
    $data['tabs'][0]['entity.user.canonical']['#link']['title'] = t('Dashboard');
  }
}

/**
 * Implements hook_system_breadcrumb_alter().
 */
function bc_dc_system_breadcrumb_alter(Breadcrumb &$breadcrumb, RouteMatchInterface $route_match, array $context): void {
  // Check if the current route is Node and bundle of data_set.
  $node = $route_match->getParameter('node');
  if (!($node instanceof NodeInterface) || $node->bundle() !== 'data_set') {
    return;
  }
  // New Breadcrumb links set.
  $links = [
    Link::createFromRoute(t('Home'), '<front>'),
  ];
  $cacheability = CacheableMetadata::createFromObject($breadcrumb);
  $breadcrumb = new Breadcrumb();
  $breadcrumb->setLinks($links);
  $breadcrumb->addCacheableDependency($cacheability);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function bc_dc_form_user_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  $user = \Drupal::currentUser();
  if (!$user->hasPermission('administer account settings')) {
    $form['language']['#access'] = FALSE;
    $form['timezone']['#access'] = FALSE;
    $form['account']['#access'] = FALSE;
  }
}

/**
 * Implements hook_field_widget_complete_form_alter().
 *
 * Adds after_build to remove help with text formats link.
 */
function bc_dc_field_widget_complete_form_alter(&$field_widget_complete_form, FormStateInterface $form_state, $context) {
  $elements = &$field_widget_complete_form['widget'];
  $type = $context['widget']->getPluginId();
  $text_types = [
    'text_textarea_with_summary',
    'text_textarea',
  ];
  if (in_array($type, $text_types)) {
    $elements[0]['#after_build'][] = '_bc_dc_remove_textarea_help';
  }
}

/**
 * Custom #after_build callback.
 */
function _bc_dc_remove_textarea_help($form_element, FormStateInterface $form_state) {
  if (isset($form_element['format'])) {
    // All this stuff is needed to hide the help text.
    unset($form_element['format']['guidelines']);
    unset($form_element['format']['help']);
    unset($form_element['format']['#type']);
    unset($form_element['format']['#theme_wrappers']);
  }

  return $form_element;
}

/**
 * Implements hook_auto_username_name().
 */
function bc_dc_auto_username_name(UserInterface $account): ?string {
  // Do not update the username for people in the admin group. Returning their
  // current name means auto_username will make no update.
  if ($account->hasPermission('change own username')) {
    return $account->getAccountName();
  }
  // By default, let auto_username generate a username.
  return NULL;
}

/**
 * Implements hook_field_widget_single_element_WIDGET_TYPE_form_alter() for paragraphs.
 */
function bc_dc_field_widget_single_element_paragraphs_form_alter(array &$element, FormStateInterface $form_state, array $context): void {
  // Act on data_column paragraphs.
  if ($element['#paragraph_type'] ?? NULL === 'data_column') {
    // Hide the type label, which is always the same.
    $element['top']['type']['#access'] = FALSE;
    // This is empty; remove to keep the markup clean.
    $element['top']['icons']['#access'] = FALSE;
    // Remove all but the first item in the summary.
    foreach (array_keys($element['top']['summary']['fields_info']['#summary']['content'] ?? []) as $key) {
      if ($key) {
        unset($element['top']['summary']['fields_info']['#summary']['content'][$key]);
      }
    }
  }
}

/**
 * Return whether a data_set has a field based on its root field_data_set_type.
 *
 * In data_set nodes, some fields are hidden based on the type of the root
 * taxonomy term ancestor of the node's field_data_set_type. The fields hidden
 * here must match the configuration in conditional_fields.
 *
 * @param \Drupal\node\NodeInterface $node
 *   The node to check.
 * @param string $field_key
 *   The field key.
 *
 * @return bool
 *   TRUE when the node has the field, FALSE otherwise.
 */
function bc_dc_data_set_has_field(NodeInterface $node, string $field_key): bool {
  $fields_to_hide = [
    'field_authoritative_info',
    'field_columns',
    'field_critical_information',
    'field_data_quality_issues',
    'field_data_set_historical_change',
    'field_data_sets_used',
    'field_high_value_info',
    'field_source_system',
  ];

  // If it is not one of the fields that may be hidden, do not hide.
  if (!in_array($field_key, $fields_to_hide, TRUE)) {
    return TRUE;
  }

  // Determine this node's root field_data_set_type.
  static $data_set_type;
  if (!isset($data_set_type)) {
    $type_tid = $node->field_data_set_type?->first()?->target_id;
    if ($type_tid) {
      $root_term = _bc_dc_get_term_root_ancestor($type_tid);
      $data_set_type = $root_term->field_root_type?->first()?->getValue()['value'] ?? FALSE;
    }
  }

  // "Data" type has all fields.
  if ($data_set_type === 'data') {
    return TRUE;
  }

  // "Report" type has field_data_sets_used.
  if ($data_set_type === 'report' && $field_key === 'field_data_sets_used') {
    return TRUE;
  }

  // Otherwise, hide the field.
  return FALSE;
}
